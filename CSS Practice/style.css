* {
  margin: 0;
  padding: 0;
  color: aliceblue;
}
body {
  background-color: crimson;
}
.box {
  margin: 2rem 2rem 2rem 2rem; /* 1st rem - top, 2nd rem - right, 3rd rem - bottom, 4th rem - left*/
  padding: 2rem 2rem 2rem 2rem; /* 1st rem - top, 2nd rem - right, 3rd rem - bottom, 4th rem - left*/
  border: 2px solid;
  height: 10rem;
  width: 10rem;
}

.first_box {
  background-color: aqua;
  text-align: center;
}

.second_box {
  background-color: blanchedalmond;
  text-align: end;
}

.third_box {
  background-color: cadetblue;
  text-align: start;
}

.images {
  width: 20rem;
  height: 20rem;
  margin: 2rem 2rem 2rem 2rem;
}

/*Display Property
   Block - occupies parent's element width. Stacked vertically by default
   Inline - occupies only the necessary space for its content. Does not start on a new line and only takes up as much width as necessary
   Inline Block - occupies content space, looks like inline from outside, behaves like block-level on the inside. 
*/
.parent_div {
  /* default display is block*/
  color: white;
  border: 2px solid;
  margin: 2rem 2rem 2rem 2rem;
}

.parent_div em {
  border: 2px solid;
}

.parent_div strong {
  /*when inline block was used, all inline element will become block element.*/
  display: inline-block;
}

/*Position Property
Static - positioned elements are not affected by the top, bottom, left, and right properties. it is always positioned according to the normal flow of the page
Relative -  is positioned relative to its normal position.Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position.  
Fixed - is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
Absolute
Sticky
*/

.positioning_practice {
  color: white;
  border: 3px solid;
  margin: 2rem 2rem 2rem 2rem;
  height: 100rem;
}

/*Default Property for position is static.*/
.static_property {
  left: 20px;
}

.relative_property {
  position: relative;
  left: 2rem;
  border: 2px solid;
}

.fixed_property {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 300px;
  border: 3px solid #73ad21;
}

.container {
  position: relative;
  width: 70rem;
  height: 30rem;
  border: 2px solid;
}

.absolute_property {
  position: absolute;
  top: 80px;
  right: 0;
  width: 200px;
  height: 100px;
}

.sticky_property {
  position: sticky;
  top: 0;
  background-color: green;
}

/*Layout Practice*/

.layout-practice {
  margin: 3rem;
}

/*Float*/

.float_practice {
  float: left;
  padding: 25px;
  color: aliceblue;
}

.float_sample1 {
  background-color: #73ad21;
}

.float_sample2 {
  background-color: aqua;
}

.float_sample3 {
  background-color: blue;
}

.img_float {
  float: left;
  width: 30%;
  height: 30%;
}

/*Flex*/

.flex_container {
  display: flex;
  justify-content: end;
  flex-flow: wrap;
  text-align: center;
  align-items: center;
  /* flex-direction: column; */
}
.f {
  width: 5rem;
  height: 5rem;
  background-color: rgb(44, 73, 99);
  margin: 2px;
}

.flex_centering {
  display: flex;
  height: 300px;
  justify-content: center;
  align-items: center;
  border: 5px solid;
}

.flex_sample {
  width: 5rem;
  height: 5rem;
  background-color: black;
}

.flex_grow {
  display: flex;
  height: 30rem;
  border: 3px solid;
  justify-content: center;
  align-items: center;
}

.fl {
  width: 5rem;
  height: 5rem;
  background-color: black;
  margin: 2px;
}

.flex1 {
  flex-grow: 1;
}

.flex3 {
  flex-basis: 900px;
}

.flex5 {
  /*shorthand first - flex-grow property, second - flex shrink, third - flex-basis*/
  flex: 0 0 500px;
}

/*Grid Practice*/

.grid_container {
  display: grid;
  gap: 1.8rem 1.8rem; /* short hand 1st - column, 2nd - row*/
  grid-template-columns: repeat(4, 1fr);
  align-content: space-between;
}

.grid_item {
  height: 5rem;
  border: 1px solid;
  background-color: blue;
}

.grid1 {
  /*first - start column and 2nd number - end column  */
  grid-column: 1/4;
}

.grid3 {
  grid-column: 2/4;
}

.grid12 {
  /*Span indicate how many column will be expanded*/
  grid-column: 3 / span 2;
}

.grid6 {
  /* short hand - 1st start line of row, 2nd - start line of column, 3rd - end line of row, 4th - end line of column*/
  grid-area: 3 / 2 / 6 / 4;
}

/*Pseudo Practice*/

.inline {
  display: inline-block;
}

.pseudo_button {
  margin-top: 5rem;
  border: 3px solid;
  background-color: #73ad21;
}

.pseudo_button:link {
  size: 50px;
}

.pseudo_button:active {
  color: red;
}

.pseudo_button:visited {
  color: red;
}
.pseudo_button:hover {
  background-color: aquamarine;
}

.pseudo_button:nth-child(2):hover {
  background-color: red;
}

.pseudo_button:last-child:hover {
  background-color: blue;
  height: 3rem;
}

.pseudo_parent p::first-letter {
  color: blue;
  font-size: 30px;
}
/*Pseudo class and element can be combined. Sequence should be class fist and then element*/
.pseudo_parent p:hover::before {
  content: "this is ";
}

.pseudo_parent p:hover::first-line {
  background-color: black;
}

/*
z-index - property specifies the stack order of an element

Parent box should be on position relative
child box should be on position absolute
*/
.z-index_practice {
  position: relative;
  margin: 2rem;
}

.black_box {
  position: relative;
  z-index: 1;
  width: 70rem;
  height: 10rem;
  border: 4px solid;
}

.grey_box {
  position: absolute;
  z-index: 3;
  width: 40rem;
  height: 5rem;
  left: 50px;
  top: 50px;
  opacity: 0.8;
  background-color: grey;
}

.green_box {
  position: absolute;
  background-color: green;
  width: 20rem;
  height: 6rem;
  left: 270px;
  top: 40px;
}
